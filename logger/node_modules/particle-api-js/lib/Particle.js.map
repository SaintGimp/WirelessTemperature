{"version":3,"sources":["../src/Particle.js"],"names":[],"mappings":"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","file":"Particle.js","sourcesContent":["import 'babel-polyfill';\nimport request from 'superagent';\nimport prefix from 'superagent-prefix';\nimport Defaults from './Defaults';\nimport EventStream from './EventStream';\n\nclass Particle {\n\n\tconstructor(options = Defaults) {\n\t\tObject.assign(this, options);\n\t\tthis.prefix = prefix(this.baseUrl);\n\t}\n\n\t/**\n\t * Login to Particle Cloud using an existing Particle acccount.\n\t * @param  {String} $0.username      Username for the Particle account\n\t * @param  {String} $0.password      Password for the Particle account\n\t * @param  {Number} $0.tokenDuration How long the access token should last in seconds\n\t * @return {Promise}\n\t */\n\tlogin({ username, password, tokenDuration = this.tokenDuration }) {\n\t\treturn this.request({ uri: '/oauth/token', form: {\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tgrant_type: 'password',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret,\n\t\t\texpires_in: tokenDuration,\n\t\t}, method: 'post' });\n\t}\n\n\t/**\n\t * Create a user account for the Particle Cloud\n\t * @param  {String} $0.username Desired username\n\t * @param  {String} $0.password Password\n\t * @return {Promise}\n\t */\n\tcreateUser({ username, password }) {\n\t\treturn this.post('/v1/users', {\n\t\t\tusername, password,\n\t\t});\n\t}\n\n\t/**\n\t * Revoke an access token\n\t * @param  {String} $0.username Username of the Particle cloud account that the token belongs to.\n\t * @param  {String} $0.password Password for the account\n\t * @param  {String} $0.token    Access token you wish to revoke\n\t * @return {Promise}\n\t */\n\tremoveAccessToken({ username, password, token }) {\n\t\treturn this.delete(`/v1/access_tokens/${token}`, {\n\t\t\taccess_token: token,\n\t\t}, { username, password });\n\t}\n\n\t/**\n\t * List all valid access tokens for a Particle Cloud account\n\t * @param  {String} $0.username Username\n\t * @param  {String} $0.password Password\n\t * @return {Promise}\n\t */\n\tlistAccessTokens({ username, password }) {\n\t\treturn this.get('/v1/access_tokens', { username, password });\n\t}\n\n\t/**\n\t * List devices claimed to the account\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistDevices({ auth }) {\n\t\treturn this.get('/v1/devices', auth);\n\t}\n\n\t/**\n\t * Get detailed informationa about a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access token\n\t * @return {Promise}\n\t */\n\tgetDevice({ deviceId, auth }) {\n\t\treturn this.get(`/v1/devices/${deviceId}`, auth);\n\t}\n\n\t/**\n\t * Claim a device to the account. The device must be online and unclaimed.\n\t * @param  {String} $0.deviceId Device ID\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tclaimDevice({ deviceId, requestTransfer, auth }) {\n\t\treturn this.request({ uri: '/v1/devices', form: {\n\t\t\tid: deviceId,\n\t\t\trequest_transfer: !!requestTransfer\n\t\t}, auth, method: 'post' });\n\t}\n\n\t/**\n\t * Unclaim / Remove a device from your account\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tremoveDevice({ deviceId, auth }) {\n\t\treturn this.delete(`/v1/devices/${deviceId}`, null, auth);\n\t}\n\n\t/**\n\t * Rename a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Desired Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\trenameDevice({ deviceId, name, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, { name }, auth);\n\t}\n\n\t/**\n\t * Generate a claim code to use in the device claiming process.\n\t * @param  {String} $0.auth  Access Token\n\t * @param  {String} [$0.iccid] ICCID of the SIM card used in the Electron\n\t * @return {Promise}\n\t */\n\tgetClaimCode({ auth, iccid = undefined }) {\n\t\treturn this.post('/v1/device_claims', { iccid }, auth);\n\t}\n\n\tvalidatePromoCode({auth, promoCode}) {\n\t\treturn this.get(`/v1/promo_code/${promoCode}`, auth);\n\t}\n\n\tchangeProduct({ deviceId, productId, shouldUpdate, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tproduct_id: productId,\n\t\t\tupdate_after_claim: shouldUpdate || false,\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Get the value of a device variable\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Variable name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tgetVariable({ deviceId, name, auth }) {\n\t\treturn this.get(`/v1/devices/${deviceId}/${name}`, auth);\n\t}\n\n\t/**\n\t * Instruct the device to turn on/off the LED in a rainbow pattern\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {Boolean} $0.signal   Signal on or off\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tsignalDevice({ deviceId, signal, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tsignal: ( !!signal ? '1' : '0' ),\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Compile and flash application firmware to a device\n\t * @param  {String} $0.deviceId      Device ID or Name\n\t * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} $0.auth          String\n\t * @return {Promise}\n\t */\n\tflashDevice({ deviceId, files, targetVersion, auth }) {\n\t\tconst form = {};\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: `/v1/devices/${deviceId}`,\n\t\t\tfiles, auth, form, method: 'put' });\n\t}\n\n\t/**\n\t * Flash the Tinker application to a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tflashTinker({ deviceId, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tapp: 'tinker',\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Compile firmware using the Particle Cloud\n\t * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {Number} [$0.platformId]    Platform id number of the device you are compiling for. Common values are 0=Core, 6=Photon, 10=Electron.\n\t * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} $0.auth          Access Token\n\t * @return {Promise}\n\t */\n\tcompileCode({ files, platformId, targetVersion, auth }) {\n\t\tconst form = { platform_id: platformId };\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: '/v1/binaries',\n\t\t\tfiles, auth, form, method: 'post' });\n\t}\n\n\t/**\n\t * Download a firmware binary\n\t * @param  {String} $0.binaryId Binary ID received from a successful compile call\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Request}\n\t */\n\tdownloadFirmwareBinary({ binaryId, auth }) {\n\t\tconst uri = `/v1/binaries/${binaryId}`;\n\t\tconst req = request('get', uri);\n\t\treq.use(this.prefix);\n\t\tthis.headers(req, auth);\n\t\tif (this.debug) {\n\t\t\tthis.debug(req);\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t * Send a new device public key to the Particle Cloud\n\t * @param  {String} $0.deviceId  Device ID or Name\n\t * @param  {(String|Buffer)} $0.key       Public key contents\n\t * @param  {String} [$0.algorithm=rsa] Algorithm used to generate the public key. Valid values are `rsa` or `ecc`.\n\t * @param  {String} $0.auth      Access Token\n\t * @return {Promise}\n\t */\n\tsendPublicKey({ deviceId, key, algorithm, auth }) {\n\t\treturn this.post(`/v1/provisioning/${deviceId}`, {\n\t\t\tdeviceID: deviceId,\n\t\t\tpublicKey: ( typeof key === 'string' ? key : key.toString() ),\n\t\t\tfilename: 'particle-api',\n\t\t\torder: `manual_${ Date.now() }`,\n\t\t\talgorithm: algorithm || 'rsa'\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Call a device function\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Function name\n\t * @param  {String} $0.argument Function argument\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tcallFunction({ deviceId, name, argument, auth }) {\n\t\treturn this.post(`/v1/devices/${deviceId}/${name}`, {\n\t\t\targs: argument,\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Get a stream of events\n\t * @param  {String} [$0.deviceId] Device ID or Name, or `mine` to indicate only your devices.\n\t * @param  {String} [$0.name]     Event Name\n\t * @param  {String} [$0.org]     Organization Slug\n\t * @param  {String} [$0.product]     Product Slug\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n\t * emit 'event' events, as well as the specific named event.\n\t */\n\tgetEventStream({ deviceId, name, org, product, auth }) {\n\t\tlet uri = '/v1/';\n\t\tif (org) {\n\t\t\turi += `orgs/${org}/`;\n\t\t\tif (product) {\n\t\t\t\turi += `products/${product}/`;\n\t\t\t} else if (deviceId && deviceId.toLowerCase() !== 'mine') {\n\t\t\t\turi += `devices/${deviceId}/`;\n\t\t\t}\n\t\t\turi += 'events';\n\t\t} else {\n\t\t\tif (!deviceId) {\n\t\t\t\turi += 'events';\n\t\t\t} else if (deviceId.toLowerCase() === 'mine') {\n\t\t\t\turi += 'devices/events';\n\t\t\t} else {\n\t\t\t\turi += `devices/${deviceId}/events`;\n\t\t\t}\n\t\t}\n\n\t\tif (name) {\n\t\t\turi += `/${encodeURIComponent(name)}`;\n\t\t}\n\t\treturn new EventStream(`${this.baseUrl}${uri}`, auth, { debug: this.debug }).connect();\n\t}\n\n\t/**\n\t * Publish a event to the Particle Cloud\n\t * @param  {String} $0.name      Event name\n\t * @param  {String} $0.data      Event data\n\t * @param  {Boolean} $0.isPrivate Should the event be publicly available?\n\t * @param  {String} $0.auth      Access Token\n\t * @return {Promise}\n\t */\n\tpublishEvent({ name, data, isPrivate, auth }) {\n\t\treturn this.post('/v1/devices/events', {\n\t\t\tname,\n\t\t\tdata,\n\t\t\t'private': isPrivate\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Create a webhook\n\t * @param  {String} $0.deviceId           Device ID or Name\n\t * @param  {String} $0.name               Webhook name\n\t * @param  {String} $0.url                URL the webhook should hit\n\t * @param  {String} [$0.requestType=POST]        HTTP method to use\n\t * @param  {Object} [$0.headers]            Additional headers to add to the webhook\n\t * @param  {Object} [$0.json]               JSON data\n\t * @param  {Object} [$0.query]              Query string data\n\t * @param  {Boolean} [$0.rejectUnauthorized] Reject invalid HTTPS certificates\n\t * @param  {Object} [$0.webhookAuth]        HTTP Basic Auth information\n\t * @param  {Object} [$0.form]               Form data\n\t * @param  {String} $0.auth               Access Token\n\t * @return {Promise}\n\t */\n\tcreateWebhook({ deviceId, name, url, requestType, headers, json, query, rejectUnauthorized, webhookAuth, form, auth }) {\n\t\tconst data = { event: name, url, requestType, headers, json, query, rejectUnauthorized, auth: webhookAuth, form };\n\t\tif (deviceId === 'mine') {\n\t\t\tdata.mydevices = true;\n\t\t} else {\n\t\t\tdata.deviceid = deviceId;\n\t\t}\n\t\treturn this.post('/v1/webhooks', data, auth);\n\t}\n\n\t/**\n\t * Delete a webhook\n\t * @param  {String} $0.hookId Webhook ID\n\t * @param  {String} $0.auth   Access Token\n\t * @return {Promise}\n\t */\n\tdeleteWebhook({ hookId, auth }) {\n\t\treturn this.delete(`/v1/webhooks/${hookId}`, null, auth);\n\t}\n\n\t/**\n\t * List all webhooks owned by the account\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistWebhooks({ auth }) {\n\t\treturn this.get('/v1/webhooks', auth);\n\t}\n\n\t/**\n\t * Get details about the current user\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tgetUserInfo({ auth }) {\n\t\treturn this.get('/v1/user', auth);\n\t}\n\n\tsetUserInfo({ stripeToken, auth }) {\n\t\treturn this.put('/v1/user', {\n\t\t\tstripe_token: stripeToken,\n\t\t}, auth);\n\t}\n\n\tcheckSIM({ iccid, auth }) {\n\t\treturn this.head(`/v1/sims/${iccid}`, auth);\n\t}\n\n\tactivateSIM({ iccid, countryCode, promoCode, auth }) {\n\t\treturn this.put(`/v1/sims/${iccid}`, {\n\t\t\tcountry: countryCode,\n\t\t\tpromo_code: promoCode,\n\t\t\taction: 'activate',\n\t\t}, auth);\n\t}\n\n\t/**\n\t * List valid build targets to be used for compiling\n\t * @param  {String} $0.auth         Access Token\n\t * @param  {Boolean} [$0.onlyFeatured=false] Only list featured build targets\n\t * @return {Promise}\n\t */\n\tlistBuildTargets({ auth, onlyFeatured = undefined }) {\n\t\tlet query;\n\t\tif (onlyFeatured !== undefined) {\n\t\t\tquery = { featured: !!onlyFeatured };\n\t\t}\n\t\treturn this.get('/v1/build_targets', auth, query);\n\t}\n\n\tget(uri, auth, query = undefined) {\n\t\treturn this.request({ uri, auth, method: 'get', query: query });\n\t}\n\n\thead(uri, auth) {\n\t\treturn this.request({ uri, auth, method: 'head' });\n\t}\n\n\tpost(uri, data, auth) {\n\t\treturn this.request({ uri, data, auth, method: 'post' });\n\t}\n\n\tput(uri, data, auth) {\n\t\treturn this.request({ uri, data, auth, method: 'put' });\n\t}\n\n\tdelete(uri, data, auth) {\n\t\treturn this.request({ uri, data, auth, method: 'delete' });\n\t}\n\n\trequest({ uri, method, data = undefined, auth, query = undefined, form = undefined, files = undefined }) {\n\t\treturn new Promise((fulfill, reject) => {\n\t\t\tconst req = request(method, uri);\n\t\t\treq.use(this.prefix);\n\t\t\tthis.headers(req, auth);\n\t\t\tif (query) {\n\t\t\t\treq.query(query);\n\t\t\t}\n\t\t\tif (files) {\n\t\t\t\tObject.keys(files).forEach((k, i) => {\n\t\t\t\t\treq.attach(`file${i + 1}`, files[k], k);\n\t\t\t\t});\n\t\t\t\tif (form) {\n\t\t\t\t\tObject.keys(form).forEach(k => {\n\t\t\t\t\t\treq.field(k, form[k]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (form) {\n\t\t\t\treq.type('form');\n\t\t\t\treq.send(form);\n\t\t\t} else if (data) {\n\t\t\t\treq.send(data);\n\t\t\t}\n\n\t\t\tif (this.debug) {\n\t\t\t\tthis.debug(req);\n\t\t\t}\n\n\t\t\treq.end((error, res) => {\n\t\t\t\tconst body = res && res.body;\n\t\t\t\tif (error) {\n\t\t\t\t\tconst statusCode = error.status;\n\t\t\t\t\tlet errorDescription = `${statusCode ? 'HTTP error' : 'Network error'} ${statusCode} from ${uri}`;\n\t\t\t\t\tif (body && body.error_description) {\n\t\t\t\t\t\terrorDescription += ' - ' + body.error_description;\n\t\t\t\t\t}\n\t\t\t\t\treject({ statusCode, errorDescription, error, body });\n\t\t\t\t} else {\n\t\t\t\t\tfulfill({\n\t\t\t\t\t\tbody: body,\n\t\t\t\t\t\tstatusCode: res.statusCode,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\theaders(req, auth) {\n\t\tif (!auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof auth === 'object') {\n\t\t\treq.auth(auth.username, auth.password);\n\t\t} else {\n\t\t\treq.set({ Authorization: `Bearer ${auth}` });\n\t\t}\n\t}\n}\n\nexport default Particle;\n"]}